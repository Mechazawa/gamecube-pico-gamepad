// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// controller //
// ---------- //

#define controller_wrap_target 0
#define controller_wrap 18

#define controller_T1 4
#define controller_T2 12

static const uint16_t controller_program_instructions[] = {
            //     .wrap_target
    0x7048, //  0: out    y, 8            side 0
    0xa742, //  1: nop                           [7]
    0xa742, //  2: nop                           [7]
    0xa742, //  3: nop                           [7]
    0xa742, //  4: nop                           [7]
    0x7321, //  5: out    x, 1            side 0 [3]
    0x1b29, //  6: jmp    !x, 9           side 1 [3]
    0x14e5, //  7: jmp    !osre, 5        side 0 [4]
    0x030b, //  8: jmp    11                     [3]
    0x04e5, //  9: jmp    !osre, 5               [4]
    0x130b, // 10: jmp    11              side 0 [3]
    0xbb42, // 11: nop                    side 1 [3]
    0xb042, // 12: nop                    side 0
    0xe027, // 13: set    x, 7
    0x2520, // 14: wait   0 pin, 0               [5]
    0x4001, // 15: in     pins, 1
    0x20a0, // 16: wait   1 pin, 0
    0x004e, // 17: jmp    x--, 14
    0x008d, // 18: jmp    y--, 13
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program controller_program = {
    .instructions = controller_program_instructions,
    .length = 19,
    .origin = -1,
};

static inline pio_sm_config controller_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + controller_wrap_target, offset + controller_wrap);
    sm_config_set_sideset(&c, 2, true, true);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/pio.h"
static inline void controller_program_init(PIO pio, uint sm, uint offset, uint pin_controller, pio_sm_config *c) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin_controller, 1, false);
    pio_gpio_init(pio, pin_controller);
    sm_config_set_in_pins(c, pin_controller);
    sm_config_set_sideset_pins(c, pin_controller);
    sm_config_set_jmp_pin(c, pin_controller);
    sm_config_set_out_shift(c, false, true, 8);
    sm_config_set_in_shift(c, false, true, 8);
    int cyclesPerBit = (controller_T1 + controller_T2) / 4;
    float frequency = 1000000;
    float clockDiv = clock_get_hz(clk_sys) / (cyclesPerBit * frequency);
    sm_config_set_clkdiv(c, clockDiv);
    pio_sm_init(pio, sm, offset, c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif
